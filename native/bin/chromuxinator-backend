#!/usr/bin/env node

var optimist = require('optimist')
  , path = require('path')
  , fs = require('fs')
  , mkdirp = require('mkdirp')
  , spawn = require('child_process').spawn
  , os = require('os')
  , EventEmitter = require('events').EventEmitter;

/**
 * Parsing arguments
 */
var options = optimist
  .usage('chromuxinator backend\nUsage: chromuxinator-backend [options]')
  .boolean('install')
  .alias('h', 'help')
  .alias('p', 'port')
  .alias('c', 'config')
  .describe('install', 'Install Chrome Native Messaging host')
  .describe('h', 'Show this message')
  .describe('host', 'Host to bind to')
  .describe('p', 'Port')
  .describe('c', 'Path to the config file')
  .boolean('native-messaging-host')
  .argv
;

if(options.help){
  console.log(optimist.help());
  return 0;
}


/**
 * Native Messaging
 */
function NativeMessagingAPI(){
  var self = this;
  var mode = 0;
  var read_length = 0;

  this.emit = function(event, data){
    var msg = JSON.stringify({
      event: event,
      data: data
    });
    var length = new Buffer(msg).length;
    var length_str = new Buffer(4);
    length_str.writeInt32LE(length, 0);
    process.stdout.write(length_str);
    process.stdout.write(msg);
  }

  function processInput(){
    if(mode == 0){
      var len = process.stdin.read(4);
      if(len != null){
        read_length = len.readInt32LE(0);
        mode = 1;
        processInput();
      }
    }else{
      var msg = process.stdin.read(read_length);
      if(msg != null){
        msg = JSON.parse(msg);
        EventEmitter.prototype.emit.call(self, msg.event, msg.data);
        mode = 0;
      }
    }
  }
  this.processInput = processInput;
}
NativeMessagingAPI.prototype = Object.create(EventEmitter.prototype);


/**
 * main()
 */
if(options['install']){
  function handleError(err){
    console.log("Permission denied, you may need to run this as superuser");
    process.exit(1);
  }

  var scriptFilename = 'nm-host.sh';
  var scriptPath = path.join(__dirname, '..', 'bin', scriptFilename);
  var manifestDirectory;
  switch(os.platform()){
    case 'linux':
      manifestDirectory = "/etc/opt/chrome/native-messaging-hosts/";
    break;
    case 'darwin':
      manifestDirectory = "/Library/Google/Chrome/NativeMessagingHosts/";
    break;
    default:
      console.log("Unsupported platform: " + os.platform());
      process.exit(1);
    break;
  }
  var manifestPath = path.join(manifestDirectory, 'net.jayunit.chromuxinator.json');
  var manifest = {
    name: "net.jayunit.chromuxinator.json",
    description: "Chromuxinator",
    path: scriptPath,
    type: "stdio",
    allowed_origins: [
      "chrome-extension://----extension-id-here----/",
    ]
  }

  if(options.id && options.id != '----extension-id-here----'){
    manifest.allowed_origins.push("chrome-extension://" + options.id + "/");
  }

  manifest = JSON.stringify(manifest, null, 2);

  mkdirp(manifestDirectory, function (err) {
    if(err) {
      handleError(err);
    }else{
      fs.writeFile(manifestPath, manifest, function(err2) {
        if(err2) {
          handleError(err2);
        } else {
          console.log("Chrome Native Messaging host application installed successfully");
        }
      });
    }
  });
}else if(options['native-messaging-host']){

  ["info", "error", "warn", "log"].forEach(function(func){
    console[func] = function(){
      process.stderr.write(Array.prototype.join.call(arguments, " ") + "\n");
    }
  });

  var api = new NativeMessagingAPI();
  var term;

  api.on('init', function(options){
    var name = fs.existsSync('/usr/share/terminfo/x/xterm-256color') ? 'xterm-256color' : 'xterm';

    api.emit('data', 'FAKE DATA FAKE DATA');

    // term = pty.spawn(process.env.SHELL || '/bin/bash', ['-l'], {
    //   name: name,
    //   cols: options.cols,
    //   rows: options.rows,
    //   cwd: options.cwd || process.cwd()
    // });

    // term.on('data', function(data) {
    //   api.emit('data', data);
    // });

    // term.on('close', function(){
    //   api.emit('disconnect', {});
    //   process.exit(0);
    // });

  });

  api.on('data', function(data){
    term.write(data);
  });

  api.on('resize', function(data){
    term.resize(data[0], data[1]);
  });

  api.on('disconnect', function(){
    term.end();
  });

  process.stdin.on('readable', function() {
    api.processInput();
  });

  process.stdin.resume();

}
